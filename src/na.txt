///Loader

import React from 'react';

const LoaderPage = ({ isLoading }) => {
  if (!isLoading) return null;

  return (
    <div className="custom-loader">
      <h1 className="pulse">We are rendering your diagram</h1>
      <h2 className="fade-in">Renderer</h2>
      <p className="fade-in-delay">By RkWalia...</p>

      <style>{`
        .custom-loader {
          position: fixed;
          top: 0;
          left: 0;
          width: 100vw;
          height: 100vh;
          background-color: #f4f1ec;
          display: flex;
          flex-direction: column;
          justify-content: center;
          align-items: center;
          text-align: center;
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          border: 3px solid #2e0a64;
          box-sizing: border-box;
          z-index: 9999;
        }

        .custom-loader h1,
        .custom-loader h2,
        .custom-loader p {
          margin: 0.5rem 0;
        }

        .custom-loader h1 {
          font-size: 2rem;
          font-weight: bold;
          animation: pulse 2s infinite;
        }

        .custom-loader h2 {
          font-size: 1.7rem;
          animation: fadeIn 1.5s ease-in forwards;
        }

        .custom-loader p {
          font-size: 1.1rem;
          animation: fadeIn 2.5s ease-in forwards;
          opacity: 0;
        }

        /* Animations */
        @keyframes pulse {
          0% { opacity: 0.4; transform: scale(1); }
          50% { opacity: 1; transform: scale(1.02); }
          100% { opacity: 0.4; transform: scale(1); }
        }

        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(10px); }
          to { opacity: 1; transform: translateY(0); }
        }

        .fade-in {
          opacity: 0;
          animation: fadeIn 2s ease forwards;
        }

        .fade-in-delay {
          opacity: 0;
          animation-delay: 1.2s;
          animation-fill-mode: forwards;
        }
      `}</style>
    </div>
  );
};

export default LoaderPage;




//full screen
const handleFullScreen = () => {
  const elem = diagramContainerRef.current;
  if (!elem) return;

  if (document.fullscreenElement) {
    document.exitFullscreen();
  } else {
    elem.requestFullscreen().catch((err) => {
      alert(`Error trying to enable fullscreen: ${err.message}`);
    });
  }
};
<button
  onClick={handleFullScreen}
  className="icon-btn"
  title="Full Screen"
>
  â›¶ {/* or use Maximize from lucide-react */}
</button>

Or if you're using Lucide icons:

js
Copy
Edit
import { Maximize, Minimize } from 'lucide-react';
Then update the button like this (optional toggle icon):

jsx
Copy
Edit
<button
  onClick={handleFullScreen}
  className="icon-btn"
  title="Full Screen"
>
  {document.fullscreenElement ? <Minimize size={18} /> : <Maximize size={18} />}
</button>


//Add PNG/JPG Download Functionality
const downloadImage = (format = 'png') => {
  const svgElement = diagramRef.current.querySelector('svg');
  if (!svgElement) return;

  // Serialize SVG
  const svgData = new XMLSerializer().serializeToString(svgElement);
  const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });
  const url = URL.createObjectURL(svgBlob);

  const image = new Image();
  image.onload = () => {
    const canvas = document.createElement('canvas');
    canvas.width = image.width;
    canvas.height = image.height;

    const ctx = canvas.getContext('2d');
    ctx.fillStyle = '#ffffff'; // optional: background fill for JPG
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.drawImage(image, 0, 0);

    // Convert to PNG or JPG
    const mimeType = format === 'jpg' ? 'image/jpeg' : 'image/png';
    const dataUrl = canvas.toDataURL(mimeType);

    // Create download link
    const link = document.createElement('a');
    link.href = dataUrl;
    link.download = `diagram.${format}`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    // Clean up
    URL.revokeObjectURL(url);
  };
  image.src = url;
};

You can place these next to your "Download SVG" button:

jsx
Copy
Edit
<button
  onClick={() => downloadImage('png')}
  className="icon-btn"
  title="Download PNG"
>
  PNG
</button>

<button
  onClick={() => downloadImage('jpg')}
  className="icon-btn"
  title="Download JPG"
>
  JPG
</button>


//Here's How to Add Diagram Zoom:
//1. Track the zoom level in state:

const [zoom, setZoom] = useState(1);
//2. Add a Zoom Slider or Buttons to UI:
//Option A: Using a slider

<div style={{ marginBottom: '1rem' }}>
  <label style={{ marginRight: '0.5rem' }}>Zoom:</label>
  <input
    type="range"
    min="0.5"
    max="2"
    step="0.1"
    value={zoom}
    onChange={(e) => setZoom(parseFloat(e.target.value))}
  />
  <span style={{ marginLeft: '0.5rem' }}>{(zoom * 100).toFixed(0)}%</span>
</div>
//Option B: Zoom In / Out Buttons

<div>
  <button onClick={() => setZoom(z => Math.max(0.5, z - 0.1))}>-</button>
  <span style={{ margin: '0 0.5rem' }}>{(zoom * 100).toFixed(0)}%</span>
  <button onClick={() => setZoom(z => Math.min(2, z + 0.1))}>+</button>
</div>
//3. Apply Zoom to the Diagram
//Update the container div that holds the SVG to apply CSS scaling using the zoom state:

<div
  ref={diagramRef}
  className="diagram-box"
  style={{
    transform: `scale(${zoom})`,
    transformOrigin: 'top left',
    width: 'fit-content'
  }}
>
  {isRendering ? 'Rendering diagram...' : 'Click "Render" to generate diagram'}
</div>


//roughness nd pan option
const [renderOptions, setRenderOptions] = useState({
  rough: false,
  pan: false
});//in store

//ToggleSwitch.js
// ToggleSwitch.js
import React from 'react';

const ToggleSwitch = ({ label, isChecked, onChange }) => {
  return (
    <label style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', cursor: 'pointer' }}>
      <span>{label}</span>
      <div style={{ position: 'relative', width: '40px', height: '20px' }}>
        <input
          type="checkbox"
          checked={isChecked}
          onChange={onChange}
          style={{
            opacity: 0,
            width: 0,
            height: 0
          }}
        />
        <span
          style={{
            position: 'absolute',
            cursor: 'pointer',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: isChecked ? '#2563eb' : '#ccc',
            borderRadius: '34px',
            transition: '.4s'
          }}
        ></span>
        <span
          style={{
            position: 'absolute',
            left: isChecked ? '20px' : '2px',
            top: '2px',
            width: '16px',
            height: '16px',
            backgroundColor: 'white',
            borderRadius: '50%',
            transition: '.4s',
            zIndex: 1
          }}
        ></span>
      </div>
    </label>
  );
};

export default ToggleSwitch;
//use in navbar
import ToggleSwitch from './ToggleSwitch';

<ToggleSwitch
  label="Rough Style"
  isChecked={renderOptions.rough}
  onChange={() =>
    setRenderOptions(prev => ({ ...prev, rough: !prev.rough }))
  }
/>

<ToggleSwitch
  label="Pan Enabled"
  isChecked={renderOptions.pan}
  onChange={() =>
    setRenderOptions(prev => ({ ...prev, pan: !prev.pan }))
  }
/>

    //pass to mermaid
mermaid.initialize({
  theme,
  securityLevel: 'loose',
  flowchart: {
    rough: renderOptions.rough,
    pan: renderOptions.pan,
    useMaxWidth: true
  },
  class: {
    rough: renderOptions.rough
  },
  sequence: {
    rough: renderOptions.rough
  }
});







//gitInfoPage
import React, { useState } from 'react';

const PopupForm = () => {
  const [showPopup, setShowPopup] = useState(false);
  const [input1, setInput1] = useState('');
  const [input2, setInput2] = useState('');
  const [input3, setInput3] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const openPopup = () => setShowPopup(true);
  const closePopup = () => setShowPopup(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);

    // Simulate async task
    await new Promise((resolve) => setTimeout(resolve, 2000));

    setIsLoading(false);
    closePopup();
  };

  // CSS styles as JS objects
  const styles = {
    overlay: {
      position: 'fixed',
      top: 0,
      left: 0,
      width: '100vw',
      height: '100vh',
      backgroundColor: 'rgba(0, 0, 0, 0.5)',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'center',
      zIndex: 9999,
    },
    popup: {
      background: 'white',
      padding: '2rem',
      borderRadius: '10px',
      width: '300px',
      boxShadow: '0 0 10px rgba(0,0,0,0.3)',
    },
    input: {
      display: 'block',
      width: '100%',
      padding: '0.5rem',
      marginBottom: '1rem',
      borderRadius: '5px',
      border: '1px solid #ccc',
    },
    button: {
      padding: '0.5rem 1rem',
      width: '100%',
      backgroundColor: '#007bff',
      color: 'white',
      border: 'none',
      borderRadius: '5px',
      fontWeight: 'bold',
      cursor: 'pointer',
    },
    buttonDisabled: {
      backgroundColor: '#999',
      cursor: 'not-allowed',
    },
  };

  return (
    <div style={{ padding: '2rem', textAlign: 'center' }}>
      <button onClick={openPopup}>Open Popup Form</button>

      {showPopup && (
        <div style={styles.overlay}>
          <div style={styles.popup}>
            <h2>Enter Details</h2>
            <form onSubmit={handleSubmit}>
              <input
                type="text"
                placeholder="Input 1"
                value={input1}
                onChange={(e) => setInput1(e.target.value)}
                required
                style={styles.input}
              />
              <input
                type="text"
                placeholder="Input 2"
                value={input2}
                onChange={(e) => setInput2(e.target.value)}
                required
                style={styles.input}
              />
              <input
                type="text"
                placeholder="Input 3"
                value={input3}
                onChange={(e) => setInput3(e.target.value)}
                required
                style={styles.input}
              />
              <button
                type="submit"
                disabled={isLoading}
                style={{
                  ...styles.button,
                  ...(isLoading ? styles.buttonDisabled : {}),
                }}
              >
                {isLoading ? 'Loading...' : 'Submit'}
              </button>
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default PopupForm;



