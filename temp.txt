//svg to png converter
const convertAndDownload = async (scale = 1) => {
    if (!svgFile) return;

    setIsConverting(true);
    
    try {
      // Read the SVG file as text
      const svgText = await svgFile.text();
      
      // Create a blob URL from the SVG
      const svgBlob = new Blob([svgText], { type: 'image/svg+xml' });
      const svgUrl = URL.createObjectURL(svgBlob);
      
      // Create an image element
      const img = new Image();
      
      img.onload = () => {
        // Create canvas
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        
        // Set canvas dimensions (scaled)
        canvas.width = img.width * scale;
        canvas.height = img.height * scale;
        
        // Draw the image on canvas
        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
        
        // Convert to PNG and download
        canvas.toBlob((blob) => {
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = svgFile.name.replace('.svg', '.png');
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          
          // Cleanup
          URL.revokeObjectURL(url);
          URL.revokeObjectURL(svgUrl);
          setIsConverting(false);
        }, 'image/png');
      };
      
      img.onerror = () => {
        alert('Error loading SVG file');
        setIsConverting(false);
        URL.revokeObjectURL(svgUrl);
      };
      
      img.src = svgUrl;
      
    } catch (error) {
      console.error('Conversion failed:', error);
      alert('Failed to convert SVG to PNG');
      setIsConverting(false);
    }
  };



// png nd jpg
import React, { useState } from 'react';
import { Download, Upload } from 'lucide-react';

export default function SvgConverter() {
  const [svgFile, setSvgFile] = useState(null);
  const [isConverting, setIsConverting] = useState(false);

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file && file.type === 'image/svg+xml') {
      setSvgFile(file);
    } else {
      alert('Please select a valid SVG file');
    }
  };

  const convertAndDownload = async (scale = 1, format = 'png') => {
    if (!svgFile) return;

    setIsConverting(true);
    
    try {
      // Read the SVG file as text
      const svgText = await svgFile.text();
      
      // Create a blob URL from the SVG
      const svgBlob = new Blob([svgText], { type: 'image/svg+xml' });
      const svgUrl = URL.createObjectURL(svgBlob);
      
      // Create an image element
      const img = new Image();
      
      img.onload = () => {
        // Create canvas
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        
        // Set canvas dimensions (scaled)
        canvas.width = img.width * scale;
        canvas.height = img.height * scale;
        
        // For JPG, fill with white background first
        if (format === 'jpg') {
          ctx.fillStyle = '#FFFFFF';
          ctx.fillRect(0, 0, canvas.width, canvas.height);
        }
        
        // Draw the image on canvas
        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
        
        // Convert to specified format and download
        const mimeType = format === 'jpg' ? 'image/jpeg' : 'image/png';
        const quality = format === 'jpg' ? 0.9 : undefined;
        
        canvas.toBlob((blob) => {
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = svgFile.name.replace('.svg', `.${format}`);
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          
          // Cleanup
          URL.revokeObjectURL(url);
          URL.revokeObjectURL(svgUrl);
          setIsConverting(false);
        }, mimeType, quality);
      };
      
      img.onerror = () => {
        alert('Error loading SVG file');
        setIsConverting(false);
        URL.revokeObjectURL(svgUrl);
      };
      
      img.src = svgUrl;
      
    } catch (error) {
      console.error('Conversion failed:', error);
      alert('Failed to convert SVG');
      setIsConverting(false);
    }
  };

  return (
    <div className="max-w-md mx-auto p-6 bg-white rounded-lg shadow-lg">
      <h2 className="text-2xl font-bold text-center mb-6 text-gray-800">
        SVG to PNG/JPG Converter
      </h2>
      
      {/* File Input */}
      <div className="mb-6">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Select SVG File
        </label>
        <div className="relative">
          <input
            type="file"
            accept=".svg,image/svg+xml"
            onChange={handleFileChange}
            className="hidden"
            id="svg-input"
          />
          <label
            htmlFor="svg-input"
            className="flex items-center justify-center w-full p-4 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-blue-400 transition-colors"
          >
            <Upload className="w-5 h-5 mr-2 text-gray-500" />
            <span className="text-gray-500">
              {svgFile ? svgFile.name : 'Choose SVG file'}
            </span>
          </label>
        </div>
      </div>

      {/* Conversion Options */}
      {svgFile && (
        <div className="space-y-4">
          <h3 className="text-lg font-medium text-gray-700">Download Options</h3>
          
          {/* PNG Options */}
          <div className="space-y-2">
            <h4 className="text-md font-medium text-gray-600">PNG Format</h4>
            <div className="grid grid-cols-1 gap-2">
              <button
                onClick={() => convertAndDownload(1, 'png')}
                disabled={isConverting}
                className="flex items-center justify-center px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <Download className="w-4 h-4 mr-2" />
                {isConverting ? 'Converting...' : 'PNG - Original Size'}
              </button>
              
              <button
                onClick={() => convertAndDownload(2, 'png')}
                disabled={isConverting}
                className="flex items-center justify-center px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <Download className="w-4 h-4 mr-2" />
                {isConverting ? 'Converting...' : 'PNG - 2x Size'}
              </button>
              
              <button
                onClick={() => convertAndDownload(4, 'png')}
                disabled={isConverting}
                className="flex items-center justify-center px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <Download className="w-4 h-4 mr-2" />
                {isConverting ? 'Converting...' : 'PNG - 4x Size'}
              </button>
            </div>
          </div>
          
          {/* JPG Options */}
          <div className="space-y-2">
            <h4 className="text-md font-medium text-gray-600">JPG Format</h4>
            <div className="grid grid-cols-1 gap-2">
              <button
                onClick={() => convertAndDownload(1, 'jpg')}
                disabled={isConverting}
                className="flex items-center justify-center px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <Download className="w-4 h-4 mr-2" />
                {isConverting ? 'Converting...' : 'JPG - Original Size'}
              </button>
              
              <button
                onClick={() => convertAndDownload(2, 'jpg')}
                disabled={isConverting}
                className="flex items-center justify-center px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <Download className="w-4 h-4 mr-2" />
                {isConverting ? 'Converting...' : 'JPG - 2x Size'}
              </button>
              
              <button
                onClick={() => convertAndDownload(4, 'jpg')}
                disabled={isConverting}
                className="flex items-center justify-center px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <Download className="w-4 h-4 mr-2" />
                {isConverting ? 'Converting...' : 'JPG - 4x Size'}
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Info */}
      <div className="mt-6 p-3 bg-blue-50 rounded-lg">
        <p className="text-sm text-blue-700">
          ðŸ’¡ Upload an SVG file and choose your preferred format and resolution for download.
        </p>
        <p className="text-xs text-blue-600 mt-1">
          PNG preserves transparency, JPG has smaller file size with white background.
        </p>
      </div>
    </div>
  );
}



//take pan feature from here
import React, { useState, useEffect, useRef } from 'react';
import { Play, Copy, Download, RotateCcw, Share, Pen, ZoomIn, ZoomOut, Move, RotateCw } from 'lucide-react';

const Playground = () => {
  const [code, setCode] = useState(`graph TD
    A[Christmas] -->|Get money| B(Go shopping)
    B --> C{Let me think}
    C -->|One| D[Laptop]
    C -->|Two| E[iPhone]
    C -->|Three| F[fa:fa-car Car]`);
  
  const [isRendering, setIsRendering] = useState(false);
  const [isRoughEnabled, setIsRoughEnabled] = useState(false);
  const [svgContent, setSvgContent] = useState('');
  const [zoomLevel, setZoomLevel] = useState(1);
  const [panX, setPanX] = useState(0);
  const [panY, setPanY] = useState(0);
  const [isPanning, setIsPanning] = useState(false);
  const [lastMousePos, setLastMousePos] = useState({ x: 0, y: 0 });
  const diagramRef = useRef(null);
  const containerRef = useRef(null);

  const examples = [
    {
      name: 'Flowchart',
      code: `graph TD
    A[Christmas] -->|Get money| B(Go shopping)
    B --> C{Let me think}
    C -->|One| D[Laptop]
    C -->|Two| E[iPhone]
    C -->|Three| F[fa:fa-car Car]`
    },
    {
      name: 'Sequence Diagram',
      code: `sequenceDiagram
    participant Alice
    participant Bob
    Alice->>John: Hello John, how are you?
    loop Healthcheck
        John->>John: Fight against hypochondria
    end
    Note right of John: Rational thoughts <br/>prevail!
    John-->>Alice: Great!
    John->>Bob: How about you?
    Bob-->>John: Jolly good!`
    },
    {
      name: 'Gantt Chart',
      code: `gantt
    title A Gantt Diagram
    dateFormat  YYYY-MM-DD
    section Section
    A task           :a1, 2014-01-01, 30d
    Another task     :after a1  , 20d
    section Another
    Task in sec      :2014-01-12  , 12d
    another task      : 24d`
    },
    {
      name: 'Class Diagram',
      code: `classDiagram
    Animal <|-- Duck
    Animal <|-- Fish
    Animal <|-- Zebra
    Animal : +int age
    Animal : +String gender
    Animal: +isMammal()
    Animal: +mate()
    class Duck{
        +String beakColor
        +swim()
        +quack()
    }
    class Fish{
        -int sizeInFeet
        -canEat()
    }
    class Zebra{
        +bool is_wild
        +run()
    }`
    }
  ];

  // Generate rough path variations
  const generateRoughPath = (originalPath, roughness = 1) => {
    const commands = originalPath.match(/[MmLlHhVvCcSsQqTtAaZz][^MmLlHhVvCcSsQqTtAaZz]*/g);
    if (!commands) return originalPath;

    let roughPath = '';
    
    commands.forEach(command => {
      const type = command[0];
      const coords = command.slice(1).trim().split(/[\s,]+/).map(Number).filter(n => !isNaN(n));
      
      switch (type.toLowerCase()) {
        case 'm':
        case 'l':
          if (coords.length >= 2) {
            const x = coords[0] + (Math.random() - 0.5) * roughness;
            const y = coords[1] + (Math.random() - 0.5) * roughness;
            roughPath += `${type}${x},${y} `;
          }
          break;
        case 'h':
          if (coords.length >= 1) {
            const x = coords[0] + (Math.random() - 0.5) * roughness;
            roughPath += `${type}${x} `;
          }
          break;
        case 'v':
          if (coords.length >= 1) {
            const y = coords[0] + (Math.random() - 0.5) * roughness;
            roughPath += `${type}${y} `;
          }
          break;
        case 'c':
          if (coords.length >= 6) {
            const newCoords = coords.map((coord, i) => 
              coord + (Math.random() - 0.5) * roughness * (i % 2 === 0 ? 1 : 1)
            );
            roughPath += `${type}${newCoords.join(',')} `;
          }
          break;
        default:
          roughPath += command + ' ';
      }
    });
    
    return roughPath.trim();
  };

  // Generate SVG content based on current settings
  const generateSVGContent = () => {
    const baseSVG = {
      width: 400,
      height: 300,
      elements: [
        {
          type: 'rect',
          x: 50, y: 50, width: 100, height: 60,
          fill: '#e1f5fe', stroke: '#0277bd', strokeWidth: 2,
          text: { x: 100, y: 85, content: 'Christmas' }
        },
        {
          type: 'rect',
          x: 250, y: 50, width: 100, height: 60,
          fill: '#f3e5f5', stroke: '#7b1fa2', strokeWidth: 2, rx: 30,
          text: { x: 300, y: 85, content: 'Go shopping' }
        },
        {
          type: 'path',
          d: 'M150 80 L250 80',
          stroke: '#333', strokeWidth: 2,
          text: { x: 200, y: 75, content: 'Get money' }
        },
        {
          type: 'polygon',
          points: '300,150 250,200 350,200',
          fill: '#fff3e0', stroke: '#f57c00', strokeWidth: 2,
          text: { x: 300, y: 185, content: 'Let me think' }
        },
        {
          type: 'path',
          d: 'M300 110 L300 150',
          stroke: '#333', strokeWidth: 2
        }
      ]
    };

    // Apply rough style transformations if enabled
    const processedElements = baseSVG.elements.map(element => {
      if (!isRoughEnabled) return element;

      const processed = { ...element };
      
      if (element.type === 'rect') {
        // Convert rect to rough path
        const { x, y, width, height } = element;
        const roughPath = generateRoughPath(`M${x},${y} L${x+width},${y} L${x+width},${y+height} L${x},${y+height} Z`, 3);
        processed.type = 'path';
        processed.d = roughPath;
        processed.strokeWidth = (element.strokeWidth || 1) + 1;
        delete processed.x;
        delete processed.y;
        delete processed.width;
        delete processed.height;
        delete processed.rx;
      } else if (element.type === 'path') {
        processed.d = generateRoughPath(element.d, 2);
        processed.strokeWidth = (element.strokeWidth || 1) + 1;
      }
      
      return processed;
    });

    // Generate SVG string
    let svgString = `<svg width="${baseSVG.width}" height="${baseSVG.height}" xmlns="http://www.w3.org/2000/svg">`;
    
    // Add rough filter if needed
    if (isRoughEnabled) {
      svgString += `
        <defs>
          <filter id="roughFilter">
            <feTurbulence baseFrequency="0.04" numOctaves="3" result="noise"/>
            <feDisplacementMap in="SourceGraphic" in2="noise" scale="1"/>
          </filter>
        </defs>`;
    }

    // Add arrow marker
    svgString += `
      <defs>
        <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="10" refY="3.5" orient="auto">
          <polygon points="0 0, 10 3.5, 0 7" fill="#333"/>
        </marker>
      </defs>`;

    // Render elements
    processedElements.forEach(element => {
      const filter = isRoughEnabled ? ' filter="url(#roughFilter)"' : '';
      const markerEnd = element.d && element.d.includes('L') ? ' marker-end="url(#arrowhead)"' : '';
      
      if (element.type === 'rect') {
        svgString += `<rect x="${element.x}" y="${element.y}" width="${element.width}" height="${element.height}" fill="${element.fill}" stroke="${element.stroke}" stroke-width="${element.strokeWidth}"${element.rx ? ` rx="${element.rx}"` : ''}${filter}/>`;
      } else if (element.type === 'path') {
        svgString += `<path d="${element.d}" fill="${element.fill || 'none'}" stroke="${element.stroke}" stroke-width="${element.strokeWidth}"${filter}${markerEnd}/>`;
      } else if (element.type === 'polygon') {
        svgString += `<polygon points="${element.points}" fill="${element.fill}" stroke="${element.stroke}" stroke-width="${element.strokeWidth}"${filter}/>`;
      }
      
      // Add text if present
      if (element.text) {
        svgString += `<text x="${element.text.x}" y="${element.text.y}" text-anchor="middle" font-family="Arial" font-size="14">${element.text.content}</text>`;
      }
    });

    svgString += '</svg>';
    return svgString;
  };

  // Pan and Zoom functionality
  const handleMouseDown = (e) => {
    if (e.button === 0) {
      setIsPanning(true);
      setLastMousePos({ x: e.clientX, y: e.clientY });
      e.preventDefault();
    }
  };

  const handleMouseMove = (e) => {
    if (isPanning) {
      const deltaX = e.clientX - lastMousePos.x;
      const deltaY = e.clientY - lastMousePos.y;
      
      setPanX(prev => prev + deltaX);
      setPanY(prev => prev + deltaY);
      setLastMousePos({ x: e.clientX, y: e.clientY });
    }
  };

  const handleMouseUp = () => {
    setIsPanning(false);
  };

  const handleWheel = (e) => {
    e.preventDefault();
    const delta = e.deltaY > 0 ? 0.9 : 1.1;
    setZoomLevel(prev => Math.max(0.1, Math.min(5, prev * delta)));
  };

  const zoomIn = () => {
    setZoomLevel(prev => Math.min(5, prev * 1.2));
  };

  const zoomOut = () => {
    setZoomLevel(prev => Math.max(0.1, prev / 1.2));
  };

  const resetView = () => {
    setZoomLevel(1);
    setPanX(0);
    setPanY(0);
  };

  // Add event listeners for pan and zoom
  useEffect(() => {
    const container = containerRef.current;
    if (container) {
      container.addEventListener('mousedown', handleMouseDown);
      container.addEventListener('mousemove', handleMouseMove);
      container.addEventListener('mouseup', handleMouseUp);
      container.addEventListener('mouseleave', handleMouseUp);
      container.addEventListener('wheel', handleWheel, { passive: false });

      return () => {
        container.removeEventListener('mousedown', handleMouseDown);
        container.removeEventListener('mousemove', handleMouseMove);
        container.removeEventListener('mouseup', handleMouseUp);
        container.removeEventListener('mouseleave', handleMouseUp);
        container.removeEventListener('wheel', handleWheel);
      };
    }
  }, [isPanning, lastMousePos]);

  // Generate SVG when component mounts or settings change
  useEffect(() => {
    const newSVG = generateSVGContent();
    setSvgContent(newSVG);
  }, [isRoughEnabled]);

  const renderDiagram = async () => {
    if (!code.trim()) return;
    
    setIsRendering(true);
    try {
      // Generate new SVG based on current settings
      const newSVG = generateSVGContent();
      setSvgContent(newSVG);
    } catch (error) {
      setSvgContent(`<div class="text-red-600 p-4 bg-red-50 rounded">
        <strong>Syntax Error:</strong><br/>
        ${error.message}
      </div>`);
    }
    setIsRendering(false);
  };

  const handleCodeChange = (newCode) => {
    setCode(newCode);
  };

  const loadExample = (exampleCode) => {
    setCode(exampleCode);
  };

  const copyCode = () => {
    navigator.clipboard.writeText(code);
  };

  const downloadSVG = () => {
    if (svgContent && svgContent.includes('<svg')) {
      try {
        const svgBlob = new Blob([svgContent], { type: 'image/svg+xml;charset=utf-8' });
        const svgUrl = URL.createObjectURL(svgBlob);
        const downloadLink = document.createElement('a');
        downloadLink.href = svgUrl;
        downloadLink.download = isRoughEnabled ? 'diagram-rough.svg' : 'diagram.svg';
        downloadLink.style.display = 'none';
        document.body.appendChild(downloadLink);
        downloadLink.click();
        
        setTimeout(() => {
          if (document.body.contains(downloadLink)) {
            document.body.removeChild(downloadLink);
          }
          URL.revokeObjectURL(svgUrl);
        }, 100);
      } catch (error) {
        console.error('Error downloading SVG:', error);
      }
    }
  };

  const resetCode = () => {
    setCode(examples[0].code);
  };

  const toggleRoughStyle = () => {
    setIsRoughEnabled(!isRoughEnabled);
  };

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Mermaid Playground</h1>
          <p className="text-gray-600">Create and test your diagrams in real-time with rough sketch styling</p>
        </div>

        {/* Examples */}
        <div className="mb-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-3">Examples</h2>
          <div className="flex flex-wrap gap-2">
            {examples.map((example, index) => (
              <button
                key={index}
                onClick={() => loadExample(example.code)}
                className="px-4 py-2 text-sm font-medium text-blue-600 bg-blue-50 rounded-md hover:bg-blue-100 transition-colors"
              >
                {example.name}
              </button>
            ))}
          </div>
        </div>

        {/* Main Content */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Code Editor */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200">
            <div className="flex items-center justify-between px-4 py-3 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">Code Editor</h3>
              <div className="flex items-center space-x-2">
                <button
                  onClick={copyCode}
                  className="p-2 text-gray-500 hover:text-gray-700 rounded-md hover:bg-gray-100"
                  title="Copy code"
                >
                  <Copy className="h-4 w-4" />
                </button>
                <button
                  onClick={resetCode}
                  className="p-2 text-gray-500 hover:text-gray-700 rounded-md hover:bg-gray-100"
                  title="Reset to default"
                >
                  <RotateCcw className="h-4 w-4" />
                </button>
                <button
                  onClick={toggleRoughStyle}
                  className={`p-2 rounded-md transition-colors ${
                    isRoughEnabled 
                      ? 'text-orange-600 bg-orange-50 hover:bg-orange-100' 
                      : 'text-gray-500 hover:text-gray-700 hover:bg-gray-100'
                  }`}
                  title={isRoughEnabled ? 'Disable rough style' : 'Enable rough style'}
                >
                  <Pen className="h-4 w-4" />
                </button>
                <button
                  onClick={renderDiagram}
                  disabled={isRendering}
                  className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50"
                >
                  <Play className="h-4 w-4" />
                  <span>{isRendering ? 'Rendering...' : 'Render'}</span>
                </button>
              </div>
            </div>
            <div className="p-4">
              <textarea
                value={code}
                onChange={(e) => handleCodeChange(e.target.value)}
                className="w-full h-96 p-4 font-mono text-sm border border-gray-300 rounded-md resize-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Enter your Mermaid diagram code here..."
              />
            </div>
          </div>

          {/* Diagram Preview */}
          <div className="bg-white rounded-lg shadow-sm border border-gray-200">
            <div className="flex items-center justify-between px-4 py-3 border-b border-gray-200">
              <div className="flex items-center space-x-3">
                <h3 className="text-lg font-semibold text-gray-900">Preview</h3>
                {isRoughEnabled && (
                  <span className="px-2 py-1 text-xs font-medium text-orange-600 bg-orange-100 rounded-full">
                    Rough Style
                  </span>
                )}
                <span className="px-2 py-1 text-xs font-medium text-blue-600 bg-blue-100 rounded-full">
                  {Math.round(zoomLevel * 100)}%
                </span>
              </div>
              <div className="flex items-center space-x-2">
                <button
                  onClick={zoomOut}
                  className="p-2 text-gray-500 hover:text-gray-700 rounded-md hover:bg-gray-100"
                  title="Zoom out"
                >
                  <ZoomOut className="h-4 w-4" />
                </button>
                <button
                  onClick={zoomIn}
                  className="p-2 text-gray-500 hover:text-gray-700 rounded-md hover:bg-gray-100"
                  title="Zoom in"
                >
                  <ZoomIn className="h-4 w-4" />
                </button>
                <button
                  onClick={resetView}
                  className="p-2 text-gray-500 hover:text-gray-700 rounded-md hover:bg-gray-100"
                  title="Reset view"
                >
                  <RotateCw className="h-4 w-4" />
                </button>
                <div className="h-4 border-l border-gray-300"></div>
                <button
                  onClick={downloadSVG}
                  className="p-2 text-gray-500 hover:text-gray-700 rounded-md hover:bg-gray-100"
                  title="Download SVG"
                >
                  <Download className="h-4 w-4" />
                </button>
                <button
                  className="p-2 text-gray-500 hover:text-gray-700 rounded-md hover:bg-gray-100"
                  title="Share diagram"
                >
                  <Share className="h-4 w-4" />
                </button>
              </div>
            </div>
            <div className="p-4">
              <div 
                ref={containerRef}
                className={`min-h-96 bg-gray-50 rounded-md border-2 border-dashed border-gray-300 overflow-hidden relative ${
                  isPanning ? 'cursor-grabbing' : 'cursor-grab'
                }`}
                style={{ 
                  height: '400px',
                  userSelect: 'none'
                }}
              >
                <div
                  ref={diagramRef}
                  className="absolute inset-0 flex items-center justify-center transition-transform duration-150 ease-out"
                  style={{
                    transform: `translate(${panX}px, ${panY}px) scale(${zoomLevel})`,
                    transformOrigin: 'center center'
                  }}
                  dangerouslySetInnerHTML={{ __html: svgContent }}
                />
                
                {!svgContent && !isRendering && (
                  <div className="absolute inset-0 flex items-center justify-center text-gray-500">
                    Click "Render" to generate diagram
                  </div>
                )}
                
                {isRendering && (
                  <div className="absolute inset-0 flex items-center justify-center text-gray-500">
                    Rendering diagram...
                  </div>
                )}
                
                {/* Pan instructions overlay */}
                <div className="absolute bottom-2 left-2 bg-black bg-opacity-50 text-white text-xs px-2 py-1 rounded flex items-center space-x-2">
                  <Move className="h-3 w-3" />
                  <span>Drag to pan â€¢ Scroll to zoom</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Tips */}
        <div className="mt-8 bg-blue-50 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-blue-900 mb-3">ðŸ’¡ Tips</h3>
          <ul className="text-blue-800 space-y-2">
            <li>â€¢ Use the examples above to get started quickly</li>
            <li>â€¢ Click the pen icon to enable rough/sketch styling for a hand-drawn look</li>
            <li>â€¢ The diagram will auto-update when you click "Render"</li>
            <li>â€¢ You can download the generated diagram as SVG</li>
            <li>â€¢ Use zoom controls or scroll wheel to zoom in/out of diagrams</li>
            <li>â€¢ Click and drag to pan around large diagrams</li>
            <li>â€¢ Use the reset view button to return to original position and zoom</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default Playground;
